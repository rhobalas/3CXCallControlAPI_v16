using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using TCX.Configuration;

namespace OMSamples.Samples
{
    [SampleCode("playlists")]
    [SampleParam("arg1", "list|create|delete|update. no parameters - checks all audio streams")]
    [SampleParam("arg2...argN", "[name=AudioFeed.Name] [source=AudioFeed.Source] [autogain|no-audiogain] [shuffle|sorted] [volume=0..100] [no-stopempty|stopempty] ")]
    [SampleDescription("prints, updates, creates, deletes playlists definitions. name source is the selector in update|delete. create - source is autogenerated if not specified. autogain set to false shuffle=false")]

    class PlayListsSample : ISample
    {
        string[] MOHParameters =
        {
        "MUSICONHOLDFILE",
        "MUSICONHOLDFILE1",
        "MUSICONHOLDFILE2",
        "MUSICONHOLDFILE3",
        "MUSICONHOLDFILE4",
        "MUSICONHOLDFILE5",
        "MUSICONHOLDFILE6",
        "MUSICONHOLDFILE7",
        "MUSICONHOLDFILE8",
        "MUSICONHOLDFILE9",
        "CONFPLACE_MOH_SOURCE",
        "IVR_MOH_SOURCE",
        "PARK_MOH_SOURCE"
        };
        public void Run(params string[] args_in)
        {
            var args = args_in.Skip(1).ToArray();
            var playlists_folder = PhoneSystem.Root.GetParameterValue("IVRPROMPTPATH") + "/Playlist";
            using (var all_playlists = PhoneSystem.Root.GetAllAudioFeeds().GetDisposer())
            {
                if (args.Length == 0 || args[0] == "list") //no parameters. display all playlists
                {
                    var playlists = all_playlists.Value
                        .Where(x => x.Type == AudioFeedType.FolderRandomFeed || x.Type == AudioFeedType.FolderSortedFeed)
                        .ToDictionary(x => x.Source);

                    var configured_folders = new HashSet<string>(playlists.Keys);
                    var all_folders = new HashSet<string>(Directory.EnumerateDirectories(playlists_folder).Select(x => Path.GetFileName(x)));

                    var playlists_with_folders = configured_folders.Intersect(all_folders).ToArray();
                    var folders_without_playlist = all_folders.Except(configured_folders).ToArray();
                    try
                    {
                        foreach (var a in playlists)
                        {
                            bool folder_exists = playlists_with_folders.Contains(a.Value.Source);
                            if (folder_exists)
                            {
                                //properly configured playlists
                                Console.ForegroundColor = ConsoleColor.Green;
                            }
                            else
                            {
                                Console.ForegroundColor = ConsoleColor.Red; //misconfigured
                            }
                            Console.WriteLine("Name={0}, Source={1}, Shuffle={2}, AutoGain={3}, MaxVolume={4}% NoNStop={5}:\n{{\n\t{6}\n}}",
                                a.Value.Name, //{0]
                                a.Value.Source, //{1}
                                a.Value.Type == AudioFeedType.FolderRandomFeed,//{2}
                                a.Value.AutoGain,//{3}
                                a.Value.MaxVolume,//{4}
                                a.Value.NoPauseIfEmpty, //{5}
                                folder_exists ? string.Join("\n\t", Directory.EnumerateFiles(playlists_folder + "/" + a.Value.Source).ToArray()) : ""//{6}
                                );
                        }
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        Console.WriteLine("Other folders:\n{0}",
                            string.Join("\t\n", folders_without_playlist.ToArray())
                            );
                    }
                    finally
                    {
                        Console.ResetColor();
                    }
                    return;
                }
                //parsing parameters
                string name = null;
                string source = null;
                bool autogaincollected = false;
                bool autogain = false;
                bool volumecollected = false;
                int MaxVolume = 0;
                bool shufflecollected = false;
                bool nonstop = false;
                bool nonstopcollected = false;
                AudioFeedType shuffle = AudioFeedType.FolderSortedFeed;

                switch (args[0])
                {
                    case "create":
                    case "update":
                    case "delete":
                        {
                            foreach (var a in args.Skip(1).ToArray())
                            {
                                if (a.StartsWith("name="))
                                {
                                    name = string.Join("=", a.Split(new string[] { "=" }, StringSplitOptions.RemoveEmptyEntries).Skip(1).ToArray());
                                    continue;
                                }

                                if (a.StartsWith("source="))
                                {
                                    source = string.Join("=", a.Split(new string[] { "=" }, StringSplitOptions.RemoveEmptyEntries).Skip(1).ToArray());
                                    continue;
                                }

                                if (a.StartsWith("volume="))
                                {
                                    volumecollected = true;
                                    MaxVolume = int.Parse(a.Split(new string[] { "=" }, StringSplitOptions.RemoveEmptyEntries)[1]);
                                    continue;
                                }

                                if (a == "autogain" || a == "no-autogain")
                                {
                                    autogaincollected = true;
                                    autogain = a == "autogain";
                                    continue;
                                }
                                if (a == "shuffle" || a == "sorted")
                                {
                                    shufflecollected = true;
                                    shuffle = a == "shuffle" ? AudioFeedType.FolderRandomFeed : AudioFeedType.FolderSortedFeed;
                                    continue;
                                }
                                if (a == "no-stopempty" || a == "stopempty")
                                {
                                    nonstopcollected = true;
                                    nonstop = a == "no-stopempty";
                                    continue;
                                }
                                Console.WriteLine($"unrecognized parameter: {a}");
                                return;
                            }
                        }
                        break;
                    default:
                        Console.WriteLine($"unknown option {args[0]}");
                        return;
                }

                //search for feed object or create new
                AudioFeed theFeed = null;
                switch (args[0])
                {
                    case "create":
                        {
                            if (source == null && name == null)
                            {
                                Console.WriteLine("Insufficiend parameters");
                                return;
                            }

                            if (source != null && PhoneSystem.Root.GetAllAudioFeeds().Any(x => x.Source.Equals(source)))
                            {
                                Console.WriteLine("Source already bound");
                                return;
                            }

                            if (name != null && PhoneSystem.Root.GetAllAudioFeeds().Any(x => x.Source.Equals(source)))
                            {
                                Console.WriteLine("Source already bound");
                                return;
                            }

                            string chars = "abcdefghijklmnopqrstuvwxyz0123456789";
                            if (name == null)
                            {
                                var a = new Random((int)DateTime.Now.Ticks);
                                name = name + chars[a.Next(26)];
                                for (int i = 0; i < 8; i++)
                                    name += chars[a.Next(chars.Length)];
                            }

                            if (!name.All(x => chars.Contains(x)) || Char.IsDigit(name[0]))
                            {
                                Console.WriteLine("Invalid name");
                                return;
                            }

                            if (source == null)
                            {
                                source = name;
                            }

                            theFeed = PhoneSystem.Root.CreateAudioFeed();
                        }
                        break;
                    case "update":
                    case "delete":
                        {
                            if (name != null)
                            {
                                theFeed = all_playlists.FirstOrDefault(x => x.Name == name);
                            }
                            else
                            {
                                theFeed = all_playlists.First(x => x.Source == source);
                                if (name != null && name != theFeed.Name)
                                {
                                    theFeed = null;
                                }
                                else
                                {
                                    name = theFeed.Name;
                                }
                            }
                        }
                        break;
                    default:
                        Console.WriteLine($"unknown option {args[0]}");
                        break;
                }

                if (theFeed == null)
                    Console.WriteLine("Not found");
                switch (args[0])
                {
                    case "create":
                        {
                            var folder_path = Path.Combine(playlists_folder, source);
                            if (!Directory.Exists(folder_path))
                            {
                                Console.WriteLine($"Creating new directory {folder_path}");
                                Directory.CreateDirectory(folder_path);
                            }
                            else
                            {
                                Console.WriteLine($"Directory {folder_path} already exists.");
                            }
                            theFeed.Source = source;
                            theFeed.Name = name;
                            theFeed.Type = shuffle;
                            theFeed.MaxVolume = MaxVolume;
                            theFeed.AutoGain = autogain;
                            theFeed.NoPauseIfEmpty = nonstop;
                            theFeed.Save();
                        }
                        break;
                    case "update":
                        {
                            //Name property cannot be updated
                            if (theFeed.Source != source)
                            {
                                theFeed.Source = source;
                            }

                            if (autogaincollected && theFeed.AutoGain != autogain)
                            {
                                theFeed.AutoGain = autogain;
                            }

                            if (volumecollected && theFeed.MaxVolume != MaxVolume)
                            {
                                theFeed.AutoGain = autogain;
                            }

                            if (shufflecollected && theFeed.Type != shuffle)
                            {
                                theFeed.Type = shuffle;
                            }

                            if (nonstopcollected && theFeed.NoPauseIfEmpty != nonstop)
                            {
                                theFeed.NoPauseIfEmpty = nonstop;
                            }
                            theFeed.Save();
                        }
                        break;
                    case "delete":
                        {
                            //verification:
                            //check all parameters and objects where references can exist
                            var reference = @"\\.\pipe\" + name;
                            var paramReferences = MOHParameters.Where(x => PhoneSystem.Root.GetParameterValue(x) == reference);
                            using (var queues = PhoneSystem.Root.GetAll<Queue>().GetDisposer().Extract(y => y.OnHoldFile == reference))
                            {
                                if (paramReferences.Any() || queues.Any())
                                {
                                    Console.WriteLine($"Cannot delete Playlist{theFeed.Source} because it is referenced by :");
                                    foreach (var a in paramReferences)
                                    {
                                        Console.WriteLine($"\tPARAMETER: {a}");
                                    }
                                    foreach (var a in queues)
                                    {
                                        Console.WriteLine($"\tQUEUE: {a.Number}");
                                    }
                                }
                                else
                                {
                                    //does not remove folder.
                                    theFeed.Delete();
                                }
                            }
                        }
                        break;
                }
            }
        }
    }
}